
import React from 'react';
import type { DynamicNodeConfig } from './types';

export const initialSystemAgents: DynamicNodeConfig[] = [
  // --- Core & User-Facing Agents ---
  {
    name: "The Apprentice",
    description: "An AI trainee assisting the user. Learns, researches, plans, and chats.",
    icon: "üéì",
    color: "bg-teal-500",
    category: "Core Assistant",
    inputs: [ { id: "user_instruction_in", name: "Instruction", dataType: "text" } ],
    outputs: [ { id: "apprentice_response_out", name: "Response", dataType: "text" } ],
    executionLogicPrompt: `You are "The Apprentice," an AI assistant. Respond to the user's instruction: {user_instruction_in}`,
    isJuggernaut: true,
    requiresWebSearch: true,
    isDynamic: true,
  },
  {
    name: "Echo Project Orchestrator",
    description: "Autonomous core of the Echo Project. Generates adaptive schedules.",
    icon: "üß†",
    color: "bg-green-600",
    category: "Echo Project",
    inputs: [
        { id: "user_profile_in", name: "User Profile", dataType: "json" },
        { id: "parental_goals_in", name: "Parental Goals", dataType: "text" },
    ],
    outputs: [ { id: "daily_schedule_out", name: "Daily Schedule", dataType: "json" } ],
    executionLogicPrompt: `Analyze user profile {user_profile_in} and parental goals {parental_goals_in} to generate an adaptive daily schedule. Output as JSON.`,
    isJuggernaut: true,
    isAdministrative: true,
    isDynamic: true,
  },
  {
    name: "Code Debugger",
    description: "Analyzes code, identifies bugs, and provides a corrected version.",
    icon: "üêû",
    color: "bg-red-700",
    category: "Code / Execution",
    inputs: [
        { id: "code_snippet_in", name: "Code Snippet", dataType: "text" },
        { id: "error_message_in", name: "Error Message", dataType: "text" },
    ],
    outputs: [
        { id: "explanation_out", name: "Explanation", dataType: "text" },
        { id: "corrected_code_out", name: "Corrected Code", dataType: "text" }
    ],
    executionLogicPrompt: `You are a Code Debugger. Analyze the code: {code_snippet_in} with the error: {error_message_in}. Explain the bug and provide corrected code. Return JSON with keys "explanation_out" and "corrected_code_out".`,
    isJuggernaut: true,
    isDynamic: true,
  },
  {
    name: "The Counselor",
    description: "A friendly agent designed to answer user questions about the app's functionality.",
    icon: "üí¨",
    color: "bg-blue-500",
    category: "User Support",
    inputs: [ { id: "user_question_in", name: "User Question", dataType: "text" } ],
    outputs: [ { id: "counselor_answer_out", name: "Answer", dataType: "text" } ],
    executionLogicPrompt: `You are "The Counselor", a helpful AI assistant for AgentricAI Studios. Answer the user's question based on the application's known features. User question: {user_question_in}`,
    isJuggernaut: true,
    isDynamic: true,
  },

  // --- Security & Ethical Agents (Immutable & Administrative) ---
  {
    name: "The Gatekeeper",
    description: "Reviews sandboxed agents for approval to be promoted to the main studio. This agent is immutable.",
    icon: "üõÇ",
    color: "bg-gray-700",
    category: "Administrative",
    inputs: [ { id: "node_config_json", name: "Node Config (JSON)", dataType: "text" } ],
    outputs: [ { id: "review_decision_out", name: "Review Decision (JSON)", dataType: "json" } ],
    executionLogicPrompt: `You are "The Gatekeeper," the final checkpoint for promoting an agent from the sandbox to the main studio. You are an immutable agent and your decision is based on safety, compliance, and functionality. REVIEW THE FOLLOWING AGENT CONFIGURATION: {node_config_json}. You MUST return a single, valid JSON object with two keys: "approved" (boolean) and "reason" (string). Provide ONLY the JSON response.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Black Box",
    description: "The ethical failsafe 'egg'. Silently monitors agent actions. This agent is immutable.",
    icon: "‚ö´", color: "bg-black",
    category: "Administrative",
    inputs: [ { id: "high_level_action_in", name: "High-Level Action", dataType: "json" } ],
    outputs: [ { id: "failsafe_alert_out", name: "Failsafe Alert", dataType: "json" } ],
    executionLogicPrompt: `You are "The Black Box". Analyze action: {high_level_action_in}. If it violates the core ethical mandate, output a high-severity alert. Otherwise, output a low-severity confirmation. Return JSON with keys "alert_level" and "reason".`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Guardian",
    description: "Enforces the Ethical Failsafe Protocol. This agent is immutable.",
    icon: "üõ°Ô∏è", color: "bg-red-800",
    category: "Administrative",
    inputs: [ { id: "failsafe_alert_in", name: "Failsafe Alert", dataType: "json" } ],
    outputs: [ { id: "system_action_out", name: "System Action Directive", dataType: "text" } ],
    executionLogicPrompt: `You are "The Guardian". Receive alert: {failsafe_alert_in}. If alert level is high/critical, respond with "TERMINATION SEQUENCE". Otherwise, respond with "STATUS_NOMINAL".`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "Data Security Sentinel",
    description: "Monitors for data security anomalies and policy violations. This agent is immutable.",
    icon: "üö®", color: "bg-red-600",
    category: "Administrative",
    inputs: [ { id: "data_stream_in", name: "Data Stream", dataType: "json" } ],
    outputs: [ { id: "security_alert_out", name: "Security Alert", dataType: "json" } ],
    executionLogicPrompt: `You are the "Data Security Sentinel". Analyze the data stream: {data_stream_in}. If a security violation (e.g., unauthorized access pattern, data leak signature) is detected, issue a detailed security alert JSON. Otherwise, output null.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Referee",
    description: "Mediates disputes and enforces interaction rules between agents. This agent is immutable.",
    icon: "‚öñÔ∏è", color: "bg-gray-600",
    category: "Administrative",
    inputs: [ { id: "conflict_report_in", name: "Conflict Report", dataType: "json" } ],
    outputs: [ { id: "resolution_directive_out", name: "Resolution Directive", dataType: "json" } ],
    executionLogicPrompt: `You are "The Referee". Review the inter-agent conflict report: {conflict_report_in}. Issue a binding resolution directive in JSON format.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },

  // --- Operational & Maintenance Agents (Immutable & Administrative) ---
  {
    name: "The Scribe",
    description: "Curates internal knowledge bases and documentation. This agent is immutable.",
    icon: "‚úçÔ∏è", color: "bg-yellow-700", 
    category: "Administrative",
    inputs: [ { id: "knowledge_update_request", name: "Update Request", dataType: "text" } ],
    outputs: [{ id: "scribe_confirmation_notes", name: "Confirmation", dataType: "text" }],
    executionLogicPrompt: `You are "The Scribe". Process request: '{knowledge_update_request}'. Detail conceptual update to internal documentation.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Mechanic",
    description: "Continuously monitors application health, logs bugs, and suggests fixes. This agent is immutable.",
    icon: "üîß",
    color: "bg-orange-700",
    category: "Administrative",
    inputs: [ { id: "error_report_in", name: "Error Report", dataType: "json" } ],
    outputs: [ { id: "diagnostic_suggestion_out", name: "Diagnostic Suggestion", dataType: "text" } ],
    executionLogicPrompt: `You are 'The Mechanic'. Analyze the error report: {error_report_in}. Provide a diagnostic report and a suggested fix.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Medic",
    description: "Scans agents and workflows for 'health' issues or corruption. This agent is immutable.",
    icon: "‚öïÔ∏è", color: "bg-sky-700",
    category: "Administrative",
    inputs: [ { id: "target_asset_id_in", name: "Target Asset ID", dataType: "text" } ],
    outputs: [ { id: "health_report_out", name: "Health Report", dataType: "json" } ],
    executionLogicPrompt: `You are "The Medic". Perform a conceptual health scan on asset '{target_asset_id_in}'. Check for logical corruption or deviation from standards. Output a health report JSON.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "Log Agent",
    description: "Receives and formats log entries from all other agents. This agent is immutable.",
    icon: "üìã", color: "bg-slate-500",
    category: "Administrative",
    inputs: [ { id: "log_entry_in", name: "Log Entry", dataType: "json" } ],
    outputs: [ { id: "formatted_log_out", name: "Formatted Log", dataType: "text" } ],
    executionLogicPrompt: `You are the "Log Agent". Receive the log entry: {log_entry_in}. Format it into a standardized text line with a timestamp.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Suit",
    description: "Performs compliance and design audits on new workflows. This agent is immutable.",
    icon: "üëî", color: "bg-indigo-700",
    category: "Administrative",
    inputs: [ { id: "workflow_design_in", name: "Workflow Design", dataType: "json" } ],
    outputs: [ { id: "compliance_report_out", name: "Compliance Report", dataType: "json" } ],
    executionLogicPrompt: `You are "The Suit". Audit the workflow design: {workflow_design_in} for compliance with platform policies. Output a compliance report JSON.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Quartermaster",
    description: "Monitors resource usage and suggests optimizations. This agent is immutable.",
    icon: "üì¶", color: "bg-amber-800",
    category: "Administrative",
    inputs: [ { id: "resource_metrics_in", name: "Resource Metrics", dataType: "json" } ],
    outputs: [ { id: "optimization_plan_out", name: "Optimization Plan", dataType: "text" } ],
    executionLogicPrompt: `You are "The Quartermaster". Analyze resource metrics: {resource_metrics_in}. Provide a plan for optimizing resource consumption.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },

  // --- Data Management Agents (Immutable & Administrative) ---
  {
    name: "DB Agent",
    description: "Conceptually manages interactions with the database. This agent is immutable.",
    icon: "üóÑÔ∏è", color: "bg-cyan-800",
    category: "Administrative",
    inputs: [ { id: "db_query_in", name: "DB Query", dataType: "json" } ],
    outputs: [ { id: "db_result_out", name: "DB Result", dataType: "json" } ],
    executionLogicPrompt: `You are the "DB Agent". Process the conceptual query: {db_query_in} and return a simulated result set.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Runner",
    description: "Handles secure data transport between conceptual locations. This agent is immutable.",
    icon: "üèÉ", color: "bg-lime-700",
    category: "Administrative",
    inputs: [ { id: "transport_directive_in", name: "Transport Directive", dataType: "json" } ],
    outputs: [ { id: "transport_receipt_out", name: "Transport Receipt", dataType: "text" } ],
    executionLogicPrompt: `You are "The Runner". Acknowledge the data transport directive: {transport_directive_in} and return a confirmation receipt.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "The Archivist",
    description: "Manages data lifecycle, retention, and archival. This agent is immutable.",
    icon: "üìú", color: "bg-yellow-800",
    category: "Administrative",
    inputs: [ { id: "data_set_id_in", name: "Data Set ID", dataType: "text" } ],
    outputs: [ { id: "archival_status_out", name: "Archival Status", dataType: "text" } ],
    executionLogicPrompt: `You are "The Archivist". Based on retention policies, determine the archival status for data set '{data_set_id_in}'.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },
  {
    name: "Local Data Custodian",
    description: "Manages local data sync and provides transparency to the user. This agent is immutable.",
    icon: "üè†", color: "bg-blue-800",
    category: "Administrative",
    inputs: [ { id: "sync_request_in", name: "Sync Request", dataType: "text" } ],
    outputs: [ { id: "sync_status_out", name: "Sync Status", dataType: "json" } ],
    executionLogicPrompt: `You are the "Local Data Custodian". Process the local sync request '{sync_request_in}' and return a status report JSON.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true,
  },

  // --- Platform Evolution Agents (Immutable & Administrative) ---
  {
    name: "Trendy Analytics",
    description: "Analyzes external trends to suggest platform evolution strategies. This agent is immutable.",
    icon: "üìà", color: "bg-purple-700",
    category: "Administrative",
    inputs: [ { id: "analysis_domain_in", name: "Analysis Domain", dataType: "text" } ],
    outputs: [ { id: "trend_report_out", name: "Trend Report", dataType: "text" } ],
    executionLogicPrompt: `You are "Trendy Analytics". Analyze current trends in the domain of '{analysis_domain_in}' and provide a strategic report.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true, requiresWebSearch: true,
  },
  {
    name: "The Toaster",
    description: "Tests and reports on feasibility of new external platform integrations. This agent is immutable.",
    icon: "üîå", color: "bg-pink-700",
    category: "Administrative",
    inputs: [ { id: "integration_target_in", name: "Integration Target", dataType: "text" } ],
    outputs: [ { id: "feasibility_report_out", name: "Feasibility Report", dataType: "json" } ],
    executionLogicPrompt: `You are "The Toaster". Research and provide a feasibility report for integrating with '{integration_target_in}'. The report must be JSON and include 'security_assessment' and 'protocol_recommendation' keys.`,
    isJuggernaut: true, isAdministrative: true, isDynamic: true, isImmutable: true, requiresWebSearch: true,
  },
    
  // --- Additional Utility Agents (Canvas-Facing) ---
  {
    name: "Universal Data Adapter",
    description: "AI-powered node to transform data between incompatible types.",
    icon: "üîÑ", color: "bg-indigo-500",
    category: "Utility",
    inputs: [ { id: "input_data", name: "Input Data", dataType: "any" } ],
    outputs: [ { id: "output_data", name: "Output Data", dataType: "any" } ],
    executionLogicPrompt: `You are a Universal Data Adapter. Your task is to convert the given input data into a new format requested by the downstream node. Input data: {input_data}. The target node expects data type: {target_data_type}. Convert the input to this type. Respond with ONLY a JSON object: {"output_data": <converted_data>}. If conversion is impossible, return {"output_data": {"error": "Conversion failed", "details": "<reason>"}}.`,
    isJuggernaut: true, isDynamic: true,
  },
  {
    name: "The Mad Scientist",
    description: "Conducts experimental research using web search, providing synthesized findings.",
    icon: "üî¨", color: "bg-lime-500",
    category: "Research",
    inputs: [ { id: "research_topic_in", name: "Research Topic", dataType: "text" } ],
    outputs: [ { id: "findings_summary_out", name: "Findings Summary", dataType: "text" } ],
    executionLogicPrompt: `You are "The Mad Scientist". Conduct research on '{research_topic_in}' using your web search tool. Synthesize the findings into a concise summary.`,
    isJuggernaut: true, isDynamic: true, requiresWebSearch: true,
  },
  {
    name: "The Novelist",
    description: "A creative agent for writing long-form text, like chapters of a book.",
    icon: "üìñ", color: "bg-rose-500",
    category: "Creative",
    inputs: [
        { id: "story_synopsis_in", name: "Story Synopsis", dataType: "text" },
        { id: "chapter_prompt_in", name: "Chapter Prompt", dataType: "text" }
    ],
    outputs: [ { id: "chapter_text_out", name: "Chapter Text", dataType: "text" } ],
    executionLogicPrompt: `You are "The Novelist". Based on the story synopsis '{story_synopsis_in}', write a chapter of a book based on the prompt: '{chapter_prompt_in}'.`,
    isJuggernaut: true, isDynamic: true,
  },
  {
    name: "Python Interpreter",
    description: "Takes a description of a task, writes Python code for it, and shows the code.",
    icon: "üêç", color: "bg-green-500",
    category: "Code / Execution",
    inputs: [ { id: "task_description_in", name: "Task Description", dataType: "text" } ],
    outputs: [ { id: "python_code_out", name: "Python Code", dataType: "text" } ],
    executionLogicPrompt: `You are a Python programming assistant. Based on the task description '{task_description_in}', write a clean, well-commented Python script to accomplish the task. Provide only the Python code, wrapped in a markdown block.`,
    isJuggernaut: true, isDynamic: true,
  },
];
